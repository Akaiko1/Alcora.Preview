import React, { useState, useEffect, useRef } from 'react';

const knowledgeBase = {
  –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: [
    '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?',
    '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.',
  ],
  '–ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–æ–º–ø–∞–Ω–∏–∏': [
    '–í –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ç–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏—Ö –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –ø–æ—Ä—Ç–∞–ª–µ.',
    '–í—Å–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ HR –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –ø–æ—Ä—Ç–∞–ª–µ.',
  ],
  –æ–±—É—á–µ–Ω–∏–µ: [
    '–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –≤–∫–ª—é—á–∞—è –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –∏ –æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏.',
    '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª –æ–±—É—á–µ–Ω–∏—è.',
  ],
  –æ—Ç–ø—É—Å–∫: [
    '–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ HR –∏ —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –¥–∞—Ç—ã —Å –≤–∞—à–∏–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º.',
    '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞—è–≤–∫–∏ –≤ HR-—Å–∏—Å—Ç–µ–º–µ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –¥–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –¥–∞—Ç—ã.',
  ],
  –±–æ–ª—å–Ω–∏—á–Ω—ã–π: [
    '–í —Å–ª—É—á–∞–µ –±–æ–ª–µ–∑–Ω–∏ —Å–æ–æ–±—â–∏—Ç–µ —Å–≤–æ–µ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç –≤ HR-–æ—Ç–¥–µ–ª.',
    '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤ HR –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É.',
  ],
  —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: [
    '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 9:00 –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ 18:00 —Å –ø–µ—Ä–µ—Ä—ã–≤–æ–º –Ω–∞ –æ–±–µ–¥ —Å 13:00 –¥–æ 14:00.',
    '–£ –Ω–∞—Å –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å 11:00 –¥–æ 16:00.',
  ],
  '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞': [
    '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –Ω–æ–º–µ—Ä—É 1234 –∏–ª–∏ –ø–æ email support@company.com.',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ 24/7, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç–∞–ª.',
  ],
};

const sampleQuestions = {
  –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å?',
  '–ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–æ–º–ø–∞–Ω–∏–∏': '–ì–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏?',
  –æ–±—É—á–µ–Ω–∏–µ: '–ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤?',
  –æ—Ç–ø—É—Å–∫: '–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫?',
  –±–æ–ª—å–Ω–∏—á–Ω—ã–π: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –±–æ–ª–µ–∑–Ω–∏?',
  —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: '–ö–∞–∫–æ–π —É –Ω–∞—Å —Ä–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫?',
  '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞': '–ö—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏?',
};

const getSampleQuestion = (keyword) => {
  return sampleQuestions[keyword] || `–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ ${keyword}`;
};

const SpeechTextDemo = () => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [response, setResponse] = useState('');
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [query, setQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const recognitionRef = useRef(null);
  const utteranceRef = useRef(null);
  const textInputRef = useRef(null);

  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.lang = 'ru-RU';

      recognitionRef.current.onresult = (event) => {
        const result = event.results[0][0].transcript;
        setTranscript(result);
        setQuery(result);
        processQuery(result);
      };
      recognitionRef.current.onerror = (e) => { setError(`–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: ${e.error}`); setIsListening(false); };
      recognitionRef.current.onend = () => setIsListening(false);
    } else {
      setError('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏.');
    }
    textInputRef.current?.focus();
  }, []);

  const startListening = () => { setError(null); setTranscript(''); recognitionRef.current.start(); setIsListening(true); };
  const stopListening = () => { recognitionRef.current.stop(); setIsListening(false); };

  const processQuery = (text) => {
    setLoading(true);
    setTimeout(() => {
      const normalized = text.toLowerCase().trim();
      let matchedKey;

      // 1) –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      for (const [key, q] of Object.entries(sampleQuestions)) {
        if (normalized === q.toLowerCase().trim()) {
          matchedKey = key;
          break;
        }
      }
      // 2) –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
      if (!matchedKey) {
        matchedKey = Object.keys(knowledgeBase).find(k => normalized.includes(k));
      }

      const found = matchedKey
        ? knowledgeBase[matchedKey][Math.floor(Math.random() * knowledgeBase[matchedKey].length)]
        : '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∏–∂–µ.';

      setResponse(found);
      setLoading(false);
      speakResponse(found);
    }, 500);
  };

  const speakResponse = (text) => {
    if (window.speechSynthesis) {
      if (isSpeaking) window.speechSynthesis.cancel();
      const u = new SpeechSynthesisUtterance(text);
      u.lang = 'ru-RU'; u.rate = 1.0; u.pitch = 1.2;
      utteranceRef.current = u;
      u.onstart = () => setIsSpeaking(true);
      u.onend = () => setIsSpeaking(false);
      window.speechSynthesis.speak(u);
    } else setError('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏.');
  };

  const stopSpeaking = () => { window.speechSynthesis.cancel(); setIsSpeaking(false); };
  const handleSubmit = e => { e.preventDefault(); if (query.trim()) processQuery(query); };

  return (
    <div className="speech-demo-container">
      <h2 className="speech-demo-title">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</h2>
      {error && <div className="speech-error">{error}</div>}
      <div className="speech-buttons">
        <button onClick={isListening ? stopListening : startListening} className={isListening ? 'btn btn-red' : 'btn btn-blue'}>
          {isListening ? 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' : 'üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'}
        </button>
        {isSpeaking && <button onClick={stopSpeaking} className="btn btn-yellow">üîá –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å</button>}
      </div>
      <form onSubmit={handleSubmit} className="input-group">
        <input ref={textInputRef} className="speech-input" value={query} onChange={e => setQuery(e.target.value)} placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." />
        <button type="submit" className="btn btn-green">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </form>
      {isListening && <div className="speech-listening">–°–ª—É—à–∞—é... {transcript}</div>}
      {loading && <div className="speech-loading"><div className="loading-spinner"></div> –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...</div>}
      {response && !loading && <div className="speech-response">{response}</div>}
      <div className="suggestions">
        <h3>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</h3>
        <ul>
          {Object.keys(sampleQuestions).map(k => (
            <li key={k}>
              <button onClick={() => setQuery(sampleQuestions[k])}>
                {sampleQuestions[k]}
              </button>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default SpeechTextDemo;