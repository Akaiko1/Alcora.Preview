import React from 'react';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–ª–Ω—ã —Ä–µ—á–∏
export const VoiceWave = ({ isListening }) => {
  const barCount = 8;
  const minHeight = 5;
  const maxHeight = 35;
  
  return (
    <div style={{ 
      display: 'flex', 
      alignItems: 'center', 
      justifyContent: 'center', 
      gap: '4px',
      height: '40px',
      marginBottom: '10px'
    }}>
      {isListening && Array(barCount).fill().map((_, i) => (
        <div 
          key={i}
          style={{
            width: '4px',
            height: `${Math.floor(Math.random() * (maxHeight - minHeight) + minHeight)}px`,
            backgroundColor: '#3182ce',
            borderRadius: '2px',
            animation: 'wave 0.5s infinite alternate',
            animationDelay: `${i * 0.1}s`
          }}
        />
      ))}
      <style>{`
        @keyframes wave {
          0% { height: ${minHeight}px; }
          100% { height: ${maxHeight}px; }
        }
      `}</style>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ
export const ConfidenceIndicator = ({ confidence }) => {
  const value = confidence || 0;
  const color = value < 0.3 ? '#e53e3e' : value < 0.7 ? '#d69e2e' : '#38a169';
  
  return (
    <div style={{ marginTop: '8px', marginBottom: '8px' }}>
      <div style={{ 
        display: 'flex',
        alignItems: 'center',
        fontSize: '0.9rem',
        color: '#4a5568'
      }}>
        <span style={{ marginRight: '8px' }}>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
        <div style={{ 
          flex: 1,
          height: '8px',
          background: '#e2e8f0',
          borderRadius: '4px',
          overflow: 'hidden'
        }}>
          <div style={{ 
            width: `${value * 100}%`,
            height: '100%',
            background: color,
            borderRadius: '4px',
            transition: 'width 0.5s ease'
          }} />
        </div>
        <span style={{ marginLeft: '8px', fontWeight: 'bold', color }}>{Math.round(value * 100)}%</span>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞)
export const SentimentIndicator = ({ sentiment }) => {
  if (!sentiment) return null;
  
  const sentimentInfo = {
    positive: { icon: 'üòä', text: '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π', color: '#38a169' },
    negative: { icon: 'üòü', text: '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π', color: '#e53e3e' },
    neutral: { icon: 'üòê', text: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', color: '#718096' }
  };
  
  const { icon, text, color } = sentimentInfo[sentiment];
  
  return (
    <div style={{ 
      display: 'inline-flex', 
      alignItems: 'center', 
      padding: '4px 8px',
      background: `${color}20`,
      borderRadius: '4px',
      marginRight: '8px',
      color
    }}>
      <span style={{ marginRight: '4px' }}>{icon}</span>
      <span style={{ fontSize: '0.9rem' }}>{text}</span>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–º–µ—Ä–µ–Ω–∏—è)
export const IntentIndicator = ({ intent }) => {
  if (!intent) return null;
  
  const intentInfo = {
    question: { icon: '‚ùì', text: '–í–æ–ø—Ä–æ—Å', color: '#3182ce' },
    command: { icon: '‚ñ∂Ô∏è', text: '–ö–æ–º–∞–Ω–¥–∞', color: '#d69e2e' },
    statement: { icon: 'üí¨', text: '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', color: '#718096' }
  };
  
  const { icon, text, color } = intentInfo[intent];
  
  return (
    <div style={{ 
      display: 'inline-flex', 
      alignItems: 'center', 
      padding: '4px 8px',
      background: `${color}20`,
      borderRadius: '4px',
      color
    }}>
      <span style={{ marginRight: '4px' }}>{icon}</span>
      <span style={{ fontSize: '0.9rem' }}>{text}</span>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
export const DialogHistory = ({ dialogHistory, onClear }) => {
  if (dialogHistory.length === 0) return null;
  
  return (
    <div className="dialog-history">
      <div className="dialog-header">
        <h3>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞</h3>
        <button className="btn btn-small" onClick={onClear}>–û—á–∏—Å—Ç–∏—Ç—å</button>
      </div>
      
      <div className="dialog-list">
        {dialogHistory.map((entry, index) => (
          <div key={index} className="dialog-entry">
            <div className="dialog-question">
              <span className="dialog-icon">üôã</span>
              <div className="dialog-content">
                <div className="dialog-text">{entry.query}</div>
                <div className="dialog-meta">
                  <span className="dialog-time">{entry.timestamp}</span>
                  {entry.intent && <span className="dialog-intent">{entry.intent}</span>}
                </div>
              </div>
            </div>
            <div className="dialog-answer">
              <span className="dialog-icon">ü§ñ</span>
              <div className="dialog-content">
                <div className="dialog-text">{entry.response}</div>
                <div className="dialog-meta">
                  {entry.category && <span className="dialog-category">{entry.category}</span>}
                  {entry.confidence && <span className="dialog-confidence">{Math.round(entry.confidence * 100)}%</span>}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
export const SuggestedQuestions = ({ questions, onSelect }) => {
  return (
    <div className="suggestions">
      <h3>–ë—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å–Ω–∏–∫ (–≤–æ–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏, —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞):</h3>
      <ul>
        {Object.entries(questions).map(([category, question]) => (
          <li key={category}>
            <button 
              onClick={() => onSelect(question)}
              className="suggestion-btn"
            >
              {question}
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
export const NlpInfoBlock = () => {
  return (
    <div className="nlp-info">
      <h3>–û —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h3>
      <p>
        –î–∞–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (NLP) –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:
      </p>
      <ul className="nlp-features">
        <li><span className="feature-name">–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è</span> - —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞</li>
        <li><span className="feature-name">–°—Ç–µ–º–º–∏–Ω–≥</span> - –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å–ª–æ–≤ –∫ –æ—Å–Ω–æ–≤–µ</li>
        <li><span className="feature-name">–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤</span> - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤</li>
        <li><span className="feature-name">–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è</span> - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∑–∞–ø—Ä–æ—Å–∞</li>
        <li><span className="feature-name">–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</span> - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏</li>
        <li><span className="feature-name">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è</span> - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞</li>
      </ul>
    </div>
  );
};